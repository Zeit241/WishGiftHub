generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  username      String?
  emailVerified DateTime?
  image         String?
  wishItems     WishItem[]
  accounts      Account[]
  sessions      Session[]
}

model WishItem {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  image       String
  title       String
  url         WishItemLink[]
  price       Float
  count       Int
  description String?
  booked      Boolean        @default(false)
  status      WishStatus     @default(ACTIVE)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  User        User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?        @db.ObjectId
}

enum WishStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
}

model WishCollection {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model WishItemLink {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  url        String
  service    String
  WishItem   WishItem? @relation(fields: [wishItemId], references: [id])
  wishItemId String?   @db.ObjectId
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
